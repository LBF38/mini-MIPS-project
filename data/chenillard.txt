#=======================================================
#                         chenillard
#=======================================================
#
# while true
#   v=0b1
#   wait_1s()
#   v=0b11
#   wait_1s()
#   v=0b111
#   wait_1s()
#   v=0b1111
#   while v!=0
#     wait_1s()
#     v=v<<1
#   end
# end
#
# func wait_1s()
#   tmp=0
#   while tmp!=50 000 000
#     tmp=tmp+1
#   end
#=========================================================
start_while:
      add r1 r0 1
      jmp r5 wait_1s      # lancement de la subroutine
      add r1 r0 3
      jmp r5 wait_1s      # lancement de la subroutine
      add r1 r0 7
      jmp r5 wait_1s      # lancement de la subroutine
      add r1 r0 15
loop:
      seq r2 r1 0         # r2=1 si r1==0, 0 sinon
      seq r2 r2 r0        # r2=1 si r2==0, 0 sinon   v!=0 in r2
      braz r2 start_while
      jmp r5 wait_1s      # lancement de la subroutine
      shl r1 r1 1         # decalage vers la gauche
      jmp r0 loop
      jmp r0 start_while
#
# procedure de consommation du temps (1 seconde) :
#
wait_1s:
      add r3 r0 0          # r3 is tmp
test_loop:
      seq r4 r3 5          # r3 = 1 seconde ? si oui r4=1
      branz r4 fin_wait    # si r4=1, jmp to fin_wait
      add r3 r3 1          # sinon increment
      jmp r0 test_loop     # et on poursuit la boucle
fin_wait:
      jmp r0 r5            # retour de fonction